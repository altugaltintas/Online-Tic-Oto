@model Online_Tic_Oto.Models.Sınıflar.SatisHaraket
@{
    ViewBag.Title = "YeniSatis";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<br />
<h2>Yeni Satiş Sayfası</h2>
<br />
<form class="form-group" method="post">
    <label>Cari Adı</label>
    @Html.DropDownListFor(a => a.CariID, new SelectList(ViewBag.carilist, "Value", "Text", null), "Cari Seçin", new { @class = "form-control", id = "CariID" })
    <span id="carierror" style="color: red;"></span>
    <br />
    <label>Personel</label>
    @Html.DropDownListFor(a => a.PesonelID, new SelectList(ViewBag.persList, "Value", "Text", null), "Personel Seçin", new { @class = "form-control", id = "PesonelID" })
    <span id="perseorror" style="color: red;"></span>
    <br />
    <button type="button" class="btn btn-success add-row">Yeni Satır Ekle</button>

    <button class="btn btn-info">Satış</button>
    <!-- Ürün satışları için tablo -->
    <table class="table">
        <thead>
            <tr>
                <th>Ürün Adı</th>
                <th>Adet</th>
                <th>Fiyat</th>
                <th>Toplam Tutar</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr class="sale-row">
                <td>
                    @Html.DropDownListFor(a => a.UrunID, new SelectList(ViewBag.urunlist, "Value", "Text"), "Ürün Seçin", new { @class = "form-control", id = "UrunID" })
                    <span id="urunerror2" style="color: red;"></span>
                </td>
                <td>
                    @Html.TextBoxFor(a => a.Adet, new { @class = "form-control quantity-input", type = "number", min = "1" })
                    <span id="urunerror" style="color: red;"></span>
                </td>
                <td>
                    @Html.TextBoxFor(a => a.Fiyat, new { @class = "form-control price-input", type = "number", step = "0.01" })
                </td>
                <td>
                    @Html.TextBoxFor(a => a.ToplamTutar, new { @class = "form-control total-amount" })
                </td>
                <td>
                    <button type="button" class="btn btn-danger remove-row">Satırı Sil</button>
                </td>
            </tr>
            <!-- Kullanıcı daha fazla ürün satışı eklemek istediğinde yeni satırlar ekleyebilirsiniz -->
        </tbody>
    </table>
</form>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('tbody').on('input', '.quantity-input, .price-input', function () {
            var row = $(this).closest('tr');
            var quantity = parseFloat(row.find('.quantity-input').val()) || 0;
            var price = parseFloat(row.find('.price-input').val()) || 0;
            var total = quantity * price;
            row.find('.total-amount').val(total.toFixed(2));

            // Ürünün stok miktarını kontrol et
            var selectedOption = row.find('.product-dropdown option:selected');
            var stokMiktar = parseInt(selectedOption.text().match(/\(Stok: (\d+)\)/)[1]);

            if (!isNaN(quantity) && quantity > stokMiktar) {
                row.find('.quantity-input').addClass('error-input'); // Hatalı girdiyi vurgula
                alert('Ürün stok miktarı yetersiz.'); // Uyarı mesajı göster
            } else {
                row.find('.quantity-input').removeClass('error-input'); // Hata girdisini kaldır
            }
        });

        $('#CariID').change(function () {
            var selectedValue = $(this).val();
            var errorSpan = $('#carierror');

            if (selectedValue === "") {
                errorSpan.text("Lütfen bir cari seçin.");
            } else {
                errorSpan.text(""); // Hata mesajını temizle
            }
        });

        $('#UrunID').change(function () {
            var selectedValue = $(this).val();
            var errorSpan2 = $('#urunerror2');

            if (selectedValue === "") {
                errorSpan2.text("Lütfen bir ürün seçin.");
            } else {
                errorSpan2.text(""); // Hata mesajını temizle
            }
        });

        $('#PesonelID').change(function () {
            var selectedValue = $(this).val();
            var errorSpan = $('#perseorror');

            if (selectedValue === "") {
                errorSpan.text("Lütfen bir personel seçin.");
            } else {
                errorSpan.text(""); // Hata mesajını temizle
            }
        });
        // Ürün adeti veya fiyatı değiştiğinde toplam tutarı güncelle
        $('tbody').on('input', '.quantity-input, .price-input', function () {
            var row = $(this).closest('tr');
            var quantity = parseFloat(row.find('.quantity-input').val()) || 0;
            var price = parseFloat(row.find('.price-input').val()) || 0;
            var total = quantity * price;
            row.find('.total-amount').val(total.toFixed(2));

            // Ürünün stok miktarını kontrol et
            var selectedOption = row.find('.product-dropdown option:selected');
            var stokMiktar = parseInt(selectedOption.text().match(/\(Stok: (\d+)\)/)[1]);

            if (!isNaN(quantity) && quantity > stokMiktar) {
                row.find('.quantity-input').addClass('error-input'); // Hatalı girdiyi vurgula
            } else {
                row.find('.quantity-input').removeClass('error-input'); // Hata girdisini kaldır
            }
        });



        // Yeni satır eklemek için düğme
        $('.add-row').click(function () {
            var newRow = $('tbody tr:first').clone();
            newRow.find('input').val('');
            newRow.find('.total-amount').val('0.00');
            $('tbody').append(newRow);
        });

        // Satırı silmek için düğme
        $('tbody').on('click', '.remove-row', function () {
            var rows = $('tbody tr.sale-row');
            if (rows.length === 1) {
                alert('Son satırı silemezsiniz.');
            } else {
                $(this).closest('tr').remove();
            }
        });






        // Form gönderildiğinde kontrolü yap
        $('form').submit(function (e) {
            var cariValue = $('#CariID').val();
            var urunValue = $('#UrunID').val();
            var personelValue = $('#PesonelID').val();
            var cariErrorSpan = $('#carierror');
            var errorSpan2 = $('#urunerror2');
            var personelErrorSpan = $('#perseorror');
            var adetValue = parseInt($('.quantity-input').val()); // Adet alanını burada doğru bir şekilde alın

            var errorSpan = $('#urunerror');

            if (cariValue === "") {
                cariErrorSpan.text("Lütfen bir cari seçin.");
                e.preventDefault(); // Formun gönderilmesini engelle
            } else {
                cariErrorSpan.text(""); // Hata mesajını temizle
            }

            if (urunValue === "") {
                errorSpan2.text("Lütfen bir ürün seçin.");
                e.preventDefault(); // Formun gönderilmesini engelle
            } else {
                errorSpan2.text(""); // Hata mesajını temizle

                // Ürünün stok miktarını kontrol et
                var selectedUrun = $("#UrunID option:selected");
                var stokMiktar = parseInt(selectedUrun.data("stok"));

                if (isNaN(adetValue) || adetValue === 0) {
                    errorSpan.text("Lütfen geçerli bir adet girin.");
                    e.preventDefault(); // Formun gönderilmesini engelle
                } else if (adetValue > stokMiktar) {
                    errorSpan.text("Stok miktarı yetersiz.");
                    e.preventDefault(); // Formun gönderilmesini engelle
                } else {
                    errorSpan.text(""); // Hata mesajını temizle
                }
            }

            if (personelValue === "") {
                personelErrorSpan.text("Lütfen bir personel seçin.");
                e.preventDefault(); // Formun gönderilmesini engelle
            } else {
                personelErrorSpan.text(""); // Hata mesajını temizle
            }
        });
    });
</script>

